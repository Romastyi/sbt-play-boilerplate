package play.boilerplate.generators

import play.boilerplate.parser.model._

abstract class RoutesCodeGenerator(prefix: String) extends CodeGenerator {

  import GeneratorUtils._

  override def generate(schema: Schema)(implicit ctx: GeneratorContext): Iterable[CodeFile] = {

    val defaultPrefix = prefix + schema.basePath

    val routes = for {
      path <- schema.paths
      (_, operation) <- path.operations.toSeq.sortBy(_._1)
    } yield RoutesCodeGenerator.composeRoutes(defaultPrefix, path, operation, generateFullClassName)

    if (routes.nonEmpty) {
      val maxUrlLength = routes.map(_.url.length).max
      val lines = routes.map(_.prettyPrint(8, maxUrlLength))
      ResourceFile(
        fileName = ctx.settings.routesFileName,
        source = lines.mkString(s"#\n# Generated by spec: ${getFileName(ctx.settings.fileName)}\n#\n\n", "\n", "")
      ) :: Nil
    } else {
      Nil
    }

  }

  protected def generateFullClassName(className: String): String

}

object RoutesCodeGenerator {

  import GeneratorUtils._
  import treehugger.forest._

  case class Routes(verb: String, url: String, methodCall: String) {
    def prettyPrint(maxVerbLength: Int, maxUrlLength: Int): String = s"${padTo(maxVerbLength, verb)}    ${padTo(maxUrlLength, url)}    $methodCall"
  }

  def composeRoutes(basePath: String, path: Path, operation: Operation, generateFullClassName: String => String)(implicit ctx: GeneratorContext): Routes = {
    Routes(
      verb = operation.httpMethod.toString.toUpperCase,
      url = RoutesCodeGenerator.composeRoutesUrl(basePath, path, operation),
      methodCall = generateMethodCall(path, operation, generateFullClassName)(ctx.addCurrentPath(operation.operationId).setInRoutes(true))
    )
  }

  private def generateMethodCall(path: Path, operation: Operation, generateFullClassName: String => String)(implicit ctx: GeneratorContext): String = {

    val ps = getMethodParameters(path, operation, withHeaders = false, withFormData = false).map {
      case (n, MethodParam(_, fullQualified, _, _, defaultValue, _, _)) =>
        s"$n: ${treeToString(fullQualified.tpt)}" + defaultValue.map(
          literal => " ?= " + treeToString(literal)
        ).getOrElse("")
    }

    val fullControllerClassName = composeName(ctx.settings.controllerPackageName, ctx.settings.controllerClassName)

    generateFullClassName(fullControllerClassName) + "." + operation.operationId + ps.mkString("(", ", ", ")")

  }

  private def composeRoutesUrl(basePath: String, path: Path, operation: Operation): String = {

    val p1 = if (basePath.startsWith("/")) basePath else "/" + basePath
    val p2 = if (p1.endsWith("/")) p1.dropRight(1) else p1

    val parts = path.pathParts.collect {
      case StaticPart(str) =>
        str
      case ParamPart(name) =>
        val param = operation.parameters.find(_.name == name).map(_.baseDef).getOrElse {
          throw new RuntimeException(s"Url path parameter '$name' not found for operation (${operation.operationId}).")
        }
        param match {
          case _: IntegerDefinition | _: LongDefinition => "$" + name + "<[0-9]+>"
          case s: StringDefinition if s.pattern.isDefined => "$" + name + "<" + s.pattern.get + ">"
          case _ => ":" + name
        }
    }.toSeq

    cleanDuplicateSlash((p2 +: parts).mkString("/"))

  }

}

final case class DynamicRoutesCodeGenerator(prefix: String = "/") extends RoutesCodeGenerator(prefix) {
  override protected def generateFullClassName(className: String): String = "@" + className
}

final case class InjectedRoutesCodeGenerator(prefix: String = "/") extends RoutesCodeGenerator(prefix) {
  override protected def generateFullClassName(className: String): String = className
}

final case class SingletonRoutesCodeGenerator(implSuffix: String = "Impl", prefix: String = "/") extends RoutesCodeGenerator(prefix) {
  override protected def generateFullClassName(className: String): String = className + implSuffix
}
