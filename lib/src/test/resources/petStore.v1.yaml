swagger: '2.0'
info:
  version: '1.0.0'
  title: Swagger Petstore (Simple)
  description: A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: Swagger API team
    email: foo@example.com
    url: http://swagger.io
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: petstore.swagger.wordnik.com
basePath: /
schemes:
  - http
consumes:
  - application/json
  - text/plain
produces:
  - application/json
paths:
  /pets:
    get:
      description: Returns all pets from the system that the user has access to
      operationId: findPets
      produces:
        - application/json
        - application/xml
        - text/plain
        - text/xml
      parameters:
        - $ref: '#/parameters/tags0'
        - $ref: '#/parameters/tags1'
        - name: tags2
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            $ref: '#/definitions/PetTag'
        - name: tags3
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
            enum:
              - young
              - mature
          collectionFormat: csv
        - name: pager.drop
          in: query
          description: number of results to skip from the beginning
          required: false
          type: integer
          format: int32
          default: -1
        - name: pager.limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          default: -1
      responses:
        '200':
          description: pet response
          schema:
            type: array
            items:
              $ref: '#/definitions/pet'
        400:
          description:
          schema:
            type: string
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      security:
      - session:
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      produces:
        - application/json
      parameters:
        - name: pet
          in: body
          description: Pet to add to the store
          required: true
          schema:
            $ref: '#/definitions/NewPet'
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      security:
      - session:
        - "roles:admin,api"
        - "capability:some"
  /pets/{id}:
    parameters:
      - name: id
        in: path
        description: ID of pet
        required: true
        type: integer
        format: int64
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: findPetById
      produces:
        - application/json
        - application/xml
        - text/xml
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /pets/{tag}:
    get:
      description: Returns a user based on a single tag, if the user does not have access to the pet
      operationId: findPetByTag
      produces:
        - application/json
        - application/xml
        - text/xml
      parameters:
        - name: tag
          in: path
          description: Tag of pet to fetch
          required: true
          type: string
          enum:
            - young
            - mature
      responses:
        200:
          description: pet response
          schema:
            $ref: '#/definitions/pet'
        500:
          description: internal error
          schema:
            type: object
            required:
            - message
            - code
            properties:
              message:
                type: string
              code:
                type: integer
                minimum: 100
                maximum: 600
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /additional/{params}:
    parameters:
      - name: params
        in: path
        required: true
        type: string
        pattern: '^(\d{2}-\d{2})$'
    post:
      operationId: additional
      description:
      parameters:
        - name: params
          description:
          in: body
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: integer
                format: int32
              tags:
                type: array
                items:
                  type: string
                  minLength: 1
                  maxLength: 32
              others:
                type: string
      responses:
        200:
          description: OK
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
parameters:
  tags0:
    name: tags0
    in: query
    description: tags to filter by
    required: false
    type: array
    items:
      $ref: '#/definitions/PetTag'
    collectionFormat: csv
  tags1:
    name: tags1
    in: query
    description: tags to filter by
    required: false
    type: array
    items:
      type: string
      enum:
        - young
        - mature
    collectionFormat: csv
definitions:
  pet:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
        minimum: 0
      name:
        type: string
      tags:
        type: array
        minItems: 0
        maxItems: 2
        items:
          $ref: '#/definitions/PetTag'
  NewPet:
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        minLength: 10
      tag:
        type: array
        items:
          $ref: '#/definitions/PetTag'
  LogLevel:
    type: string
    enum: &LOGLEVEL
      - trace
      - debug
      - info
      - warning
      - fatal
  errorModel:
    required:
      - code
      - uuid
      - message
    properties:
      code:
        type: integer
        format: int32
        minimum: 0
      message:
        type: string
      level:
        type: string
        enum: *LOGLEVEL
      uuid:
        type: string
        format: uuid
      obj:
        type: object
        required:
          - message
          - code
        properties:
          message:
            type: string
          code:
            type: integer
            minimum: 100
            maximum: 600
  PetTag:
    type: string
    enum: &PETTAG
      - young
      - mature
  CaseObject:
    type: object
