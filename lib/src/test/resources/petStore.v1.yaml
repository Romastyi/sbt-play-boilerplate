swagger: '2.0'
info:
  version: '1.0.0'
  title: Swagger Petstore (Simple)
  description: A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: Swagger API team
    email: foo@example.com
    url: http://swagger.io
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: petstore.swagger.wordnik.com
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /pets:
    get:
      description: Returns all pets from the system that the user has access to
      operationId: findPets
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
#        - $ref: '#/parameters/tags'
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            $ref: '#/definitions/PetTag'
#            type: string
#            enum:
#              - young
#              - mature
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: pet response
          schema:
            type: array
            items:
              $ref: '#/definitions/pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      security:
      - session:
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      produces:
        - application/json
      parameters:
        - name: pet
          in: body
          description: Pet to add to the store
          required: true
          schema:
            $ref: '#/definitions/newPet'
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      security:
      - session:
        - "roles:admin,api"
        - "capability:some"
  /pets/{id}:
    parameters:
      - name: id
        in: path
        description: ID of pet
        required: true
        type: integer
        format: int64
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: findPetById
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /pets/{tag}:
    get:
      description: Returns a user based on a single tag, if the user does not have access to the pet
      operationId: findPetByTag
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tag
          in: path
          description: Tag of pet to fetch
          required: true
          type: string
          enum:
            - young
            - mature
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
#            type: object
#            required:
#            - message
#            - code
#            properties:
#              message:
#                type: string
#              code:
#                type: integer
#                minimum: 100
#                maximum: 600
parameters:
  tags:
    name: tags
    in: query
    description: tags to filter by
    required: false
    type: array
    items:
      $ref: '#/definitions/PetTag'
#      type: string
#      enum:
#        - young
#        - mature
    collectionFormat: csv
definitions:
  pet:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      tag:
        type: array
        minItems: 0
        maxItems: 2
        items:
          $ref: '#/definitions/PetTag'
  newPet:
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        minLength: 10
      tag:
        type: array
        items:
          $ref: '#/definitions/PetTag'
  LogLevel:
    type: string
    enum: &LOGLEVEL
      - trace
      - debug
      - info
      - warning
      - fatal
  errorModel:
    required:
      - code
      - uuid
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      level:
        type: string
        enum: *LOGLEVEL
      uuid:
        type: string
        format: uuid
#      obj:
#        type: object
#        required:
#        - message
#        - code
#        properties:
#          message:
#            type: string
#          code:
#            type: integer
#            minimum: 100
#            maximum: 600
  PetTag:
    type: string
    enum: &PETTAG
      - young
      - mature
  CaseObject:
    type: object
